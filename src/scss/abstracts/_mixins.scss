// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "variables" as *;
//================= media mixins =================

/// Media query mixin for responsive design.
/// @mixin
/// @param {String | Number} $size - Breakpoint size or numerical width.
/// @param {String} $type - Type of media query, default is "min-width".
/// @throws When using a number without a unit.
/// @throws When the provided keyword is not in the $breakpoints map.
/// @example
/// map:
/// $breakpoints: (sm: 30em, md: 45em, lg: 65em);
///
///   @include mq(md) {
///     / Styles for screens larger than or equal to 45em.
///   }
///
///   @include mq(600px, "max-width") {
///     / Styles for screens smaller than or equal to 600px.
///   }
@mixin mq($size, $type: "min-width") {
    @if map.has-key($breakpoints, $size) {
        $breakpoint: map-get($breakpoints, $size);
        @media screen and (#{$type}: $breakpoint) {
            @content;
        }
    } @else if meta.type-of($size) == number {
        @if math.is-unitless($size) {
            @error 'when using a number with @mq() make sure to include a unit';
        } @else {
            @media screen and (#{$type}: $size) {
                @content;
            }
        }
    } @else {
        @error 'the keyword #{$size} is not in the $breakpoints map';
    }
}

/// Media query mixin for a range of screen sizes.
///
/// @param {String | Number} $size1 - Lower breakpoint size or numerical width.
/// @param {String | Number} $size2 - Upper breakpoint size or numerical width.
/// @throws When using a number without a unit.
/// @throws When the provided keyword is not in the $breakpoints map.
/// @example
/// map:
/// $breakpoints: (sm: 30em, md: 45em, lg: 65em);
///
///   @include mq-range(sm, md) {
///      Styles for screens larger than or equal to 30em
///      and smaller than or equal to 45em.
///   }
///   @include mq-range(600px, 900px) {
///      Styles for screens larger than or equal to 600px
///      and smaller than or equal to 900px.
///   }
@mixin mq-range($size1, $size2) {
    @if map.has-key($breakpoints, $size1) and map.has-key($breakpoints, $size2)
    {
        $breakpoint1: map-get($breakpoints, $size1);
        $breakpoint2: map-get($breakpoints, $size2);
        @media only screen and (min-width: $breakpoint1) and (max-width: $breakpoint2) {
            @content;
        }
    } @else if meta.type-of($size1) == number or meta.type-of($size2) == number
    {
        @if math.is-unitless($size1) or math.is-unitless($size2) {
            @error 'when using a number with @mq() make sure to include a unit';
        } @else {
            @media only screen and (min-width: $size) and (max-width: $size2) {
                @content;
            }
        }
    } @else {
        @error 'the keyword #{$size} is not in the $breakpoints map';
    }
}

//================= Classes mixins =================

/// Generate utility classes for a given property based on a map of values.
///
/// @param {Map} $map - Map containing values for the property.
/// @param {String} $property - Property for which utility classes will be generated.
///
/// @Note to use it on MakeClasses mixin

@mixin makeClassesOnly($map, $property) {
    @each $value in $map {
        .#{$property}-#{$value} {
            #{$property}: #{$value};
        }
    }
}

///
/// Generate utility classes for a given property based on a map of values,
/// with media query variations for each breakpoint in $mq-list.
///
/// @param {Map} $map - Map containing values for the property.
/// @param {String} $property - Property for which utility classes will be generated.
/// @Note to use it on MakeClasses mixin

@mixin makeClassesWithMq($map, $property) {
    @each $media in $mq-list {
        @include mq($media) {
            @include makeClassesOnly($map, "#{$media}-#{$property}");
        }
    }
}

///
/// Generate utility classes for a given property based on a map of values.
///
/// @param {Map} $map - Map containing values for the property.
/// @param {String} $property - Property for which utility classes will be generated.
/// @param {String} $mq - Flag indicating whether to include media queries. Default is "false".
/// @throws {error} when you don't use mq keyword if you want generate classes with media query

@mixin MakeClasses($map, $property, $mq: "false") {
    @if $mq == "mq" {
        @include makeClassesOnly($map, $property);
        @include makeClassesWithMq($map, $property);
    } @else if $mq != "false" {
        @error 'The third mast be "false" (default) to not set media query or "mq" to set media query';
    } @else {
        @include makeClassesOnly($map, $property);
    }
}

//========================= Event mixins (hover, active, focus, focus-within) ==============================

/// Event wrapper
/// @param {Bool} $self [false] - Whether or not to include current selector
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus,
        &:focus-within {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus,
        &:focus-within {
            @content;
        }
    }
}

@mixin grid-dropdown-wrapper($dropdown-child) {
    .grid-dropdown-wrapper {
        display: grid;
        grid-template-rows: 0fr;
        transition: grid-template-rows 0.2s ease-out;

        &[grid-dropdown] {
            grid-template-rows: 1fr;
        }
        .#{$dropdown-child} {
            overflow: hidden;
        }
    }
}

//========================= nth of child mixins ==============================*/

/// Make a context based selector a little more friendly
/// @param {String} $context
@mixin child-parent($context) {
    #{$context} & {
        @content;
    }
}

/// Select all children from the first to `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin first($num) {
    @if $num == 1 {
        &:first-child {
            @content;
        }
    } @else {
        &:nth-child(-n + #{$num}) {
            @content;
        }
    }
}

/// Select all children from the last to `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin last($num) {
    &:nth-last-child(-n + #{$num}) {
        @content;
    }
}

/// Select all children after the first to `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin after-first($num) {
    &:nth-child(n + #{$num + 1}) {
        @content;
    }
}

/// Select all children before `$num` from the last.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin from-end($num) {
    &:nth-last-child(#{$num}) {
        @content;
    }
}

/// Select all children between `$first` and `$last`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin between($first, $last) {
    &:nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

/// Select all even children between `$first` and `$last`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin even-between($first, $last) {
    &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

/// Select all odd children between `$first` and `$last`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin odd-between($first, $last) {
    &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

/// Select all `$num` children between `$first` and `$last`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin n-between($num, $first, $last) {
    &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

/// Select all children but `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin all-but($num) {
    &:not(:nth-child(#{$num})) {
        @content;
    }
}

/// Select children each `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
/// @alias every
@mixin each($num) {
    &:nth-child(#{$num}n) {
        @content;
    }
}

/// Select children each `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin every($num) {
    &:nth-child(#{$num}n) {
        @content;
    }
}

/// Select the `$num` child from the start and the `$num` child from the last.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin from-first-last($num) {
    &:nth-child(#{$num}),
    &:nth-last-child(#{$num}) {
        @content;
    }
}

/// Select the item in the middle of `$num` child. Only works with odd number
/// chain.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin middle($num) {
    &:nth-child(#{round($num / 2)}) {
        @content;
    }
}

/// Select all children between the `$num` first and the `$num` last.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin all-but-first-last($num) {
    &:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {
        @content;
    }
}

/// This quantity-query mixin will only select the first of `$limit` items. It will not
/// work if there is not as much as item as you set in `$limit`.
/// @group Quantity queries
/// @param {number} $limit
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin first-of($limit) {
    &:nth-last-child(#{$limit}):first-child {
        @content;
    }
}

/// This quantity-query mixin will only select the last of `$limit` items. It will not
/// if there is not as much as item as you set in `$limit`.
/// @group Quantity queries
/// @param {number} $limit
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin last-of($limit) {
    &:nth-of-type(#{$limit}):nth-last-of-type(1) {
        @content;
    }
}

/// This quantity-query mixin will select every items if there is at least `$num` items. It will not
/// if there is not as much as item as you set in `$num`.
/// @group Quantity queries
/// @param {number} $limit
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin at-least($num) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);

    &:nth-last-child(n + #{$num}),
    &:nth-last-child(n + #{$num}) ~ #{$child} {
        @content;
    }
}

/// This quantity-query mixin will select every items if there is at most `$num` items. It will not
/// if there is not as much as item as you set in `$num`.
/// @group Quantity queries
/// @param {number} $limit
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin at-most($num) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);

    &:nth-last-child(-n + #{$num}):first-child,
    &:nth-last-child(-n + #{$num}):first-child ~ #{$child} {
        @content;
    }
}

/// This quantity-query mixin will select every items only if there is between `$min` and `$max` items.
/// @group Quantity queries
/// @param {number} $limit
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin in-between($min, $max) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);

    &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,
    &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child
        ~ #{$child} {
        @content;
    }
}

/// Select the first exact child
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin first-child() {
    &:first-of-type {
        @content;
    }
}

/// Select the last exact child
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin last-child() {
    &:last-of-type {
        @content;
    }
}

/// Select all even children.
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin even() {
    &:nth-child(even) {
        @content;
    }
}

/// Select all odd children.
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin odd() {
    &:nth-child(odd) {
        @content;
    }
}

/// Select only the first and last child.
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin first-last() {
    &:first-child,
    &:last-child {
        @content;
    }
}

/// Will only select the child if it’s unique.
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @alias only
@mixin only() {
    &:only-child {
        @content;
    }
}

/// Will only select children if they are not unique. Meaning if there is at
/// least 2 children, the style is applied.
/// @group no-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
@mixin not-only() {
    &:not(:only-child) {
        @content;
    }
}

/// This mixin is used to automatically sort z-index in numerical order. But it
/// can also sort them in anti-numerical order, depending the parameters you use.
/// @group using functions
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - Number of children
/// @param {string} $direction [forward] - Direction of the sort
/// @param {number} $index [0] - Index of the sorting
@mixin child-index($num, $direction: "forward", $index: 0) {
    @for $i from 1 through $num {
        @if ($direction == "forward") {
            &:nth-child(#{$i}) {
                z-index: order-index($i, $index);
                @content;
            }
        } @else if ($direction == "backward") {
            &:nth-last-child(#{$i}) {
                z-index: order-index($i, $index);
                @content;
            }
        }
    }
}

/// Used by the child-index mixin. It will returned the proper sorted numbers
/// depending on the `$index` value.
/// @access private
/// @param {number} $num - Number of children
/// @param {number} $index - Index of the sorting
@function order-index($i, $index) {
    @return ($index + $i);
}

@mixin triangle(
    $color,
    $direction,
    $size: 6px,
    $position: absolute,
    $round: false
) {
    position: absolute;
    height: 0;
    width: 0;

    @if $round {
        border-radius: 3px;
    }

    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round($size / 2.5);
    } @else if $direction == up {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        margin-bottom: 0 - round($size / 2.5);
    } @else if $direction == right {
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        border-top: $size solid transparent;
        margin-right: -$size;
    } @else if $direction == left {
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        border-top: $size solid transparent;
        margin-left: -$size;
    }
}

@mixin caret-arrow($color, $direction: right, $size: 6px, $thickness: 2px) {
    border: solid $color;
    border-width: 0 $thickness $thickness 0;
    content: "";
    display: inline-block;
    height: $size;
    width: $size;

    /* stylelint-disable block-closing-brace-newline-after */
    @if ($direction == top) {
        transform: rotate(-135deg);
    } @else if ($direction == left) {
        transform: rotate(135deg);
    } @else if ($direction == bottom) {
        transform: rotate(45deg);
    } @else if ($direction == right) {
        transform: rotate(-45deg);
    }
}
